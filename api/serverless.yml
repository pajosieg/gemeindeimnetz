service: gemeinde-im-netz

provider:
  name: aws
  runtime: nodejs10.x

custom:
  headers:
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
  authorizer:
    name: cognito-authorizer
    arn: arn:aws:cognito-idp:eu-central-1:953031679657:userpool/eu-central-1_6WjHy69OW
    identitySource: method.request.header.Authorization
  output:
    handle: scripts/output.process
    file: output.json
  env:
    STRAPI_BASE_URL: ${env:STRAPI_BASE_URL}
    STRAPI_PASSWORD: ${env:STRAPI_PASSWORD}
    STRAPI_LOGIN: ${env:STRAPI_LOGIN}
  dotenv:
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION

functions:
  time:
    handler: getTime.getTime
    events:
      - http:
          path: time
          method: get
          authorizer: ${self:custom.authorizer}
          headers: ${self:custom.headers}
          cors: true
          origins:
            - "*"
  user:
    handler: user.getUser
    events:
      - http:
          path: user/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          authorizer: ${self:custom.authorizer}
          headers: ${self:custom.headers}
          cors: true
          origins:
            - "*"
    env: ${self:custom.env}
  createUser:
    handler: user.createUser
    events:
      - http:
          path: user
          method: post
          authorizer: ${self:custom.authorizer}
          headers: ${self:custom.headers}
          cors: true
          origins:
            - "*"
    env: ${self:custom.env}
  community:
    handler: community.getCommunity
    events:
      - http:
          path: community/{id}
          method: get
          authorizer: ${self:custom.authorizer}
          headers: ${self:custom.headers}
          cors: true
          origins:
            - "*"
  allCommunities:
    handler: community.getAllCommunities
    events:
      - http:
          path: allCommunities
          method: get
          authorizer: ${self:custom.authorizer}
          headers: ${self:custom.headers}
          cors: true
          origins:
            - "*"
  # time:
  #   handler: getTime.getTime
  #   events:
  #     - http:
  #         path: time
  #         method: get
  #         authorizer: ${self:custom.authorizer}
  #         headers: ${self:custom.headers}
  #         cors: true
  #         origins:
  #           - "*"
  # time:
  #   handler: getTime.getTime
  #   events:
  #     - http:
  #         path: time
  #         method: get
  #         authorizer: ${self:custom.authorizer}
  #         headers: ${self:custom.headers}
  #         cors: true
  #         origins:
  #           - "*"
  # time:
  #   handler: getTime.getTime
  #   events:
  #     - http:
  #         path: time
  #         method: get
  #         authorizer: ${self:custom.authorizer}
  #         headers: ${self:custom.headers}
  #         cors: true
  #         origins:
  #           - "*"
  # time:
  #   handler: getTime.getTime
  #   events:
  #     - http:
  #         path: time
  #         method: get
  #         authorizer: ${self:custom.authorizer}
  #         headers: ${self:custom.headers}
  #         cors: true
  #         origins:
  #           - "*"
  # time:
  #   handler: getTime.getTime
  #   events:
  #     - http:
  #         path: time
  #         method: get
  #         authorizer: ${self:custom.authorizer}
  #         headers: ${self:custom.headers}
  #         cors: true
  #         origins:
  #           - "*"

  votes:
    handler: getVotes.getVotes
    events:
      - http:
          path: votes
          method: get

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

plugins:
  - serverless-stack-output
  - serverless-dotenv-plugin
